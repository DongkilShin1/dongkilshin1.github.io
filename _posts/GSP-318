# GSP-318 : Deploy to Kubernetes in Google Cloud

https://www.courseintern.com/post/qwiklabs/challenge-labs/gsp318-deploy-to-kubernetes-in-google-cloud/

https://www.youtube.com/watch?v=YQhd0HzQNKw

https://www.youtube.com/watch?v=hRNZkTklJf4

https://github.com/sumedhdixit/GCP/tree/Deploy-to-Kubernetes-in-Google-Cloud--Challenge-Lab

# Challenge scenario
You have just completed training on containers and their creation and management and now you need to demonstrate to the Jooli Inc. development team your new skills.
You have to help with some of their initial work on a new project around an application environment utilizing Kubernetes.
Some of the work was already done for you, but other parts require your expert skills.

You are expected to create container images, store the images in a repository, and configure a Jenkins CI/CD pipeline to automate the build for the product.
Your know that Kurt, your supervisor, will ask you to complete these tasks:

. Create a Docker image and store the Dockerfile.
. Test the created Docker image.
. Push the Docker image into the Container Repository.
. Use the image to create and expose a deployment in Kubernetes
. Update the image and push a change to the deployment.
. Create a pipeline in Jenkins to deploy a new version of your image when the source code changes.

- Some Jooli Inc. standards you should follow:
. Create all resources in the *us-east1* region and *us-east1-b* zone, unless otherwise directed.
. Use the project VPCs.
. Naming is normally team-resource, e.g. an instance could be named kraken-webserver1.
. Allocate cost effective resource sizes. Projects are monitored and excessive resource use will result in the containing project's termination (and possibly yours), 
  so beware. This is the guidance the monitoring team is willing to share: unless directed, use *n1-standard-1*.

# TASK 1: Create a Docker image and store the *Dockerfile*
. Open Cloud Shell and run source <(gsutil cat gs://cloud-training/gsp318/marking/setup_marking_v2.sh).
  This command will install marking scripts you can use to help check your progress.
. Use Cloud Shell to clone the *valkyrie-app* source code repository (it is in your project).
. The app source code is in *valkyrie-app/source*. Create *valkyrie-app/Dockerfile* and add the configuration below.

```
gcloud auth list
// gsutil cat gs://cloud-training/gsp318/marking/setup_marking_v2.sh | bash
source <(gsutil cat gs://cloud-training/gsp318/marking/setup_marking_v2.sh)
gcloud source repos clone valkyrie-app
cd valkyrie-app

cat > Dockerfile <<EOF
FROM golang:1.10
WORKDIR /go/src/app
COPY source .
RUN go install -v
ENTRYPOINT ["app","-single=true","-port=8080"]
EOF

docker build -t valkyrie-app:v0.0.2 .
cd ..
//cd marking
./step1_v2.sh
```
. Use valkyrie-app/Dockerfile to create a Docker image called *valkyrie-app* with the tag *v0.0.1*
. Once you have created the Docker image, and before clicking Check my progress, run *step1_v2.sh* to perform the local check of your work. 
  After you get a successful response from the local marking you can check your progress.

# TASK 2: Test the created *Docker image*
. Launch a container using the image *valkyrie-app:v0.0.1*. You need to map the host’s port 8080 to port 8080 on the container. 
  Add & to the end of the command to cause the container to run in the background.
. When your container is running you will see the page by Web Preview.
. Once you have your container running, and before clicking Check my progress, run *step2_v2.sh* to perform the local check of your work. 
  After you get a successful response from the local marking you can check your progress.
  
  Launch a container using the image valkyrie-prod:v0.0.3
 
```
// cd ..
cd valkyrie-app
docker run -p 8080:8080 valkyrie-app:v0.0.2 &
cd ..
// cd marking
./step2_v2.sh
```

# TASK 3: *Push* the Docker image in the Container Repository (GCR)
. Push the Docker image *valkyrie-app:v0.0.1* into the Container Registry.
. Make sure you re-tag the container to *gcr.io/qwiklabs-gcp-00-98109d62cb21/valkyrie-app:v0.0.1*

Push the Docker image valkyrie-prod:v0.0.3 into the Container Registry.
Make sure you re-tag the container to gcr.io/qwiklabs-gcp-04-b5c11cb4b93d/valkyrie-prod:v0.0.3

```
//cd ..
cd valkyrie-app
docker tag valkyrie-app:v0.0.2 gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2
//docker tag valkyrie-app:v0.0.1 gcr.io/qwiklabs-gcp-00-98109d62cb21/valkyrie-app:v0.0.1
//docker tag valkyrie-app:v0.0.2 gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-prod:v0.0.2

docker push gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2
//docker push gcr.io/qwiklabs-gcp-00-98109d62cb21/valkyrie-app:v0.0.1
//docker push gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-prod:v0.0.3
```

# TASK 4: Create and expose a deployment in *Kubernetes*
. Kurt created the deployment.yaml and service.yaml to deploy your new container image to a Kubernetes cluster (called *valkyrie-dev*).
  The two files are in *valkyrie-app/k8s*.
. Remember you need to get the *Kubernetes credentials* before you deploy the image onto the Kubernetes cluster.
. Before you create the deployments make sure you check the deployment.yaml and service.yaml files.
  Kurt thinks they need some values set (he thinks he left some placeholder values).
. You can check the load balancer once it’s available.

```
//sed -i s#IMAGE_HERE#gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2#g k8s/deployment.yaml
//sed -i s#valkyrie-app:v0.0.1#gcr.io/qwiklabs-gcp-00-98109d62cb21/valkyrie-app:v0.0.1#g k8s/deployment.yaml
sed -i s#valkyrie-app:v0.0.2#gcr.io/qwiklabs-gcp-00-f03452e5cbef/valkyrie-app:v0.0.2#g k8s/deployment.yaml
//gcr.io/qwiklabs-gcp-00-f03452e5cbef/valkyrie-app:v0.0.2
//gcloud container clusters get-credentials valkyrie-dev --zone us-east1-b
gcloud container clusters get-credentials valkyrie-dev --zone us-east1-d
kubectl create -f k8s/deployment.yaml
kubectl create -f k8s/service.yaml
git merge origin/kurt-dev
```

# TASK 5: Update the deployment with a new version of valkyrie-app
. Before deploying the new code, increase the replicas from 1 to 4 to ensure you don't cause an outage.

```
kubectl edit deployment valkyrie-dev

. Press "i" to get into insert mode and change "replicas" from 1 to 4. Press "Esc" -> ":wq" -> Enter to exit Vim (두군데 다 변경)
```

. Kurt made changes to the source code (he put the changes in a branch called *kurt-dev*).
  You need to merge kurt-dev into master (you should use *git merge origin/kurt-dev*).
. Build the new code as version *v0.0.2 of valkyrie-app*, push the updated image to the Container Repository, and then redeploy to the valkyrie-dev cluster. 
  You will know you have the new v0.0.2 version because the titles for the cards will be green.


qwiklabs-gcp-00-f03452e5cbef/valkyrie-app:v0.0.3   
```
git merge origin/kurt-dev
docker build -t gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.3 .
docker push gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.3
kubectl edit deployment valkyrie-dev

. Press 'i' to edit and change image to "image: gcr.io/YOUR_PROJECT_ID/valkyrie-app:v0.0.2". Press "Esc" -> ":wq" -> Enter  (두군데 다 변경)

docker ps
```

# TASK 6: Create a pipeline in Jenkins to deploy your app
. This process of building the container and pushing to the container repository can be automated using Jenkins. 
  There is a Jenkins deployment in your valkyrie-dev cluster - connect to Jenkins and configure a job to build when you push a change to the source code.
. Remember with Jenkins:
. Get the password with printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo.
. Connect to the Jenkins console using the commands below (but make sure you don't have a running container docker ps; if you do, kill it):

```
